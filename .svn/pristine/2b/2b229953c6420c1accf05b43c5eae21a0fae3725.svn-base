/**
 * Define the courtship behaviour of agents, when an agent whant to make love.
 * @file CourtshipBehaviour.cpp
 * @author Laurent Valentin
 * @date 13/03/2014
 */

#include "CourtshipBehaviour.h"
#include "../Logic/move.h"

/**
 * A coutship between two Agents.
 * @param mother the Agent who make a child.
 * @param cpy_matrix a copy of the field.
 * @return a boolean if the courtship is succed or failed.
 */
bool CourtshipBehaviour::act(Agent * mother, Agent *** cpy_matrix, DataStorage& data)
{
    move_t  direction = (move_t)0;
    bool    end_loving;
    bool    end = false;
    bool    find_empty_place;
    int     x_empty;
    int     y_empty;
    Agent * father = NULL;
    int     x = mother->getCoordinate().x;
    int     y = mother->getCoordinate().y;
    
    
    do
    {
        end_loving = false;
        find_empty_place = false;
        
        switch (direction) {
            case UP:
                if ((y > 0) && (cpy_matrix[x][y - 1]))
                {
                    father = cpy_matrix[x][y - 1];
                }
                else if ((y > 0) && (!cpy_matrix[x][y - 1]))
                {
                    find_empty_place = true;
                    x_empty = x;
                    y_empty = y - 1;
                }
                break;
            case RIGHT:
                if ((x < data.getWidth() - 1) && (cpy_matrix[x + 1][y]))
                {
                    father = cpy_matrix[x + 1][y];
                }
                else if ((x < data.getWidth() - 1) && (!cpy_matrix[x + 1][y]))
                {
                    find_empty_place = true;
                    x_empty = x + 1;
                    y_empty = y;
                }
                break;
            case DOWN:
                if ((y < data.getHeight() - 1) && (cpy_matrix[x][y + 1]))
                {
                    father = cpy_matrix[x][y + 1];
                }
                else if ((y < data.getWidth() - 1) && (!cpy_matrix[x][y + 1]))
                {
                    find_empty_place = true;
                    x_empty = x;
                    y_empty = y + 1;
                }
                break;
            case LEFT:
                if ((x > 0) && (cpy_matrix[x - 1][y]))
                {
                    father = cpy_matrix[x - 1][y];
                }
                else if ((x > 0) && (!cpy_matrix[x - 1][y]))
                {
                    find_empty_place = true;
                    x_empty = x - 1;
                    y_empty = y;
                }
                break;
            default:
                end = true;
                break;
        }
        
        if (father && mother->isSameType(father) &&
            mother->getAge() > Agent::SEXUAL_MAJORITY)
        {
            end_loving = true;
        }
        
        direction = (move_t)(direction + 1);
        
    } while (!end && !(find_empty_place && end_loving));
    
    if (find_empty_place && end_loving)
    {
        data.makeLove(mother, father, x_empty, y_empty);
    }
    
    return (!find_empty_place) && (!end_loving);
}